@preamble{"\newcommand*\wordfmtfn[1]{\ensuremath{\mathbb{W}_{#1}}}"}

% Maybe give some of the symbol ones proper names?
%% Shared types
@index{numeric}
@index{symbolic}
@index{state}
@index{memory}

@symbol{bool,
  name = {\ensuremath{\mathbb B}},
  description = {Type of boolean values, True and False},
  parent = {numeric}
}
@symbol{nat,
  name = {\ensuremath{\mathbb N}},
  description = {Type of natural numbers},
  parent = {numeric}
}
@symbol{word,
  name = {\ensuremath{\mathbb W}},
  description = {Type of (unsigned) words; defaults to 64 bits, but may be qualified with the bit size},
  parent = {numeric},
  format = {wordfmtfn}
}

@symbol{register,
  name = {\ensuremath{\mathbb R}},
  description = {Type of symbolic registers; not denoting real numbers in this case},
  parent = {symbolic}
}
@symbol{flag,
  name = {\ensuremath{\mathbb F}},
  description = {Type of symbolic flags},
  parent = {symbolic}
}
@symbol{val,
  name = {\ensuremath{\mathbb V}},
  description = {Type of symbolic values for \glsxtrshort{hg} work and symbolic expressions for \glsxtrshort{eicfg} work},
  parent = {symbolic},
  seealso = {esp}
}
@symbol{esp,
  name = {\ensuremath{E_\mathrm{SP}}},
  description = {Type of expressions for \glsxtrshort{cfg}/syntax-guided work},
  parent = {symbolic},
  seealso = {val}
}

@symbol{abs-state,
  name = {\ensuremath{\mathbbm\Sigma}},
  description = {Type of symbolic states for the \glsxtrshort{hg} work and abstract states for \glsxtrshort{eicfg} work},
  parent = {state}
}
@symbol{conc-state,
  name = {\ensuremath{\mathbb S}},
  description = {Type of concrete states},
  parent = {state}
}

%% From CFG-driven work
%TODO: maybe change this to \mathbb{P}?
@symbol{instaddr,
  name = {\ensuremath{\mathbb L}},
  description = {Type of instruction addresses in a program; a 64-bit word},
  parent = {numeric},
  seealso = {word}
}

%% From Syntax-driven work
% moving away from just $A$
@symbol{inst1,
  name = {\ensuremath{\mathbb A}},
  description = {Type of instructions for \glsxtrshort{cfg}- and syntax-driven works},
  seealso = {inst2}
}
@symbol{isabelle-state,
  name = {\ensuremath{\mathbb S}},
  description = {Type representing program state; an Isabelle record},
  parent = {state}
}
@symbol{basic-block,
  name = {\ensuremath\beta},
  description = {Type of basic blocks}
}
@symbol{branch,
  name = {\ensuremath\Phi},
  description = {Type of branching conditions}
}
@symbol{assign,
  name = {\ensuremath{A_\mathrm{SP}}},
  description = {Type of assignments}
}
@symbol{state-part,
  name = {\ensuremath{\var{SP}}},
  description = {Type of state parts},
  seealso = {memory-region,flag,register}
}

%% FROM Hoare Graph/lattice lifting (PLDI 2022) paper
@symbol{expression,
  name = {\ensuremath{\mathbb E}},
  description = {Type of symbolic expressions for \glsxtrshort{hg} work},
  parent = {symbolic}
}
@symbol{constant,
  name = {\ensuremath{\mathbb C}},
  description = {Type of constant expressions},
  seealso = {expression}
}
%\newcommand{\variable}{\mathbb V} % variables are just symbolic values so just using \val in place of this for now

@symbol{predicate,
  name = {\ensuremath{\mathsf{Pred}}},
  description = {Type of symbolic state predicates (for \glsxtrshort{hg} work)},
  parent = {state}
}
@symbol{memtree,
  name = {\ensuremath{\mathsf{MemTree}}},
  description = {Type of memory trees},
  parent = {memory}
}
@symbol{mem,
  name = {\ensuremath{\mathsf{Mem}}},
  description = {Type of memory forests},
  parent = {memory}
}

%% From EICFG (TACAS 2023) paper
@symbol{inst2,
  name = {\ensuremath{\mathtt{Inst}}},
  description = {Type of instructions for \glsxtrshort{eicfg} work},
  seealso = {inst1}
}

@symbol{graph,
  name = {\ensuremath{\mathbb G}},
  description = {Type of \glsxtrshortpl{cfg}}
}
@symbol{node,
  name = {\ensuremath{\mathbb N}},
  description = {Type of graph nodes},
  parent = {graph}
}
@symbol{edge,
  name = {\ensuremath{\mathbb N\times\mathbb N\times(\mathtt{Inst}|\bot)}},
  description = {Type of graph edges},
  parent = {graph},
  seealso = {node,bot,inst2}
}
@symbol{exception,
  name = {\ensuremath{\mathbb E}},
  description = {Type of exceptions for \glsxtrshort{eicfg} work}
}
@symbol{pointer,
  name = {\ensuremath{\mathbb P}},
  description = {Type of pointers; a 64-bit word},
  parent = {numeric},
  seealso = {word}
}
@symbol{termination,
  name = {\ensuremath{\mathbb T}},
  description = {Type of termination conditions; could be empty}
}
