% Motivation
Formal characterization of the memory used by a program is an important basis
for security analyses and compositional verification. Proving that it only modifies
memory within specified regions, the property of \emph{memory preservation},
is an important aspect of that. However, accurately proving memory preservation
requires operating on at most the assembly level due to the semantic gap between
high-level languages and the code that processors actually execute,
and verifying programs on the assembly level is difficult. An automated method,
such as model checking, would not be able to handle many interesting functions due
to the undecidability problem, and fully-interactive methods would not scale either.
The solution is to combine proof generation with interactive theorem proving
in a \emph{semi-automated manner}: let some untrusted tool
extract as much information as it can from the functions under test
and then generate all the necessary proofs to be completed in a theorem prover.

% First contribution
The first contribution of this dissertation is a control-flow-driven verification
approach with mostly manual invariant specification
at automatically-selected cutpoints.
The memory regions and any additional preconditions
must also be determined manually in Isabelle/HOL.
This methodology was applied to 71 functions from the HermitCore unikernel library,
including one recursive one, covering a total of 2379 assembly instructions.

% Second contribution
The second contribution of this dissertation is a syntax-driven verification
approach with fully-automated invariant and memory region generation.
It produces formal memory usage certificates that can be verified in Isabelle
with minimal effort, the main manual work being weakening any loop invariants.
This was not applied to any recursive functions but was successfully applied
to 251 functions from the Xen hypervisor project,
covering a total of \num{12252} assembly instructions.
